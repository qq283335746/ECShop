<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <configSections>
    <section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler,log4net" />
  </configSections>
  <log4net>
    <!--所有logger的基节点，root的设置在所有logger中都起作用。 
        当在root和logger中重复设定相同的appender时，你会发现同一日志信息将被记录两次。-->
    <root>
      <!--log level: ALL|DEBUG|INFO|WARN|ERROR|FATAL|OFF-->
      <level value="ALL" />
      <appender-ref ref="InfoFileAppender" />
      <appender-ref ref="ErrorFileAppender"/>
    </root>
    <!--定义输出到控制台命令行中-->
    <appender name="ConsoleAppender" type="log4net.Appender.ConsoleAppender">
      <layout type="log4net.Layout.PatternLayout">
        <conversionPattern value="%d %-5p %m - %c%n%n" />
      </layout>
    </appender>
    <!-- 一个appender可以由多个logger共用，当然一个logger可以指定多个appender。-->
    <appender name="InfoFileAppender" type="log4net.Appender.RollingFileAppender,log4net" >
      <!--指定输出日志文件名-->
      <param name="File" value="AppLog/InfoLog.txt" />
      <param name="AppendToFile" value="true" />
      <param name="RollingStyle" value="Date" />
      <param name="DatePattern" value="yyyy.MM.dd" />
      <param name="StaticLogFileName" value="true" />
      <layout type="log4net.Layout.PatternLayout,log4net">
        <param name="ConversionPattern" value="%d %-5p %m - %c%n%n" />
      </layout>
      <!--输出级别在WARN和OFF之间的日志-->
      <filter type="log4net.Filter.LevelRangeFilter">
        <param name="LevelMin" value="DEBUG" />
        <param name="LevelMax" value="INFO" />
      </filter>
    </appender>

    <appender name="ErrorFileAppender" type="log4net.Appender.RollingFileAppender,log4net" >
      <!--指定输出日志文件名-->
      <param name="File" value="AppLog/ErrorLog.txt" />
      <param name="AppendToFile" value="true" />
      <param name="RollingStyle" value="Date" />
      <param name="DatePattern" value="yyyy.MM.dd" />
      <param name="StaticLogFileName" value="true" />
      <layout type="log4net.Layout.PatternLayout,log4net">
        <param name="ConversionPattern" value="%d %-5p %m - %c%n%n" />
      </layout>
      <!--输出级别在WARN和OFF之间的日志-->
      <filter type="log4net.Filter.LevelRangeFilter">
        <param name="LevelMin" value="ERROR" />
        <param name="LevelMax" value="ERROR" />
      </filter>
    </appender>
  </log4net>
</configuration>

<!--
==================================layout节点的配置说明======================================
 %m(message):输出的日志消息，如ILog.Debug(…)输出的一条消息 
 %n(new line):换行
 %d(datetime):输出当前语句运行的时刻 
 %r(run time):输出程序从运行到执行到当前语句时消耗的毫秒数
 %t(thread id):当前语句所在的线程ID
 %p(priority): 日志的当前优先级别，即DEBUG、INFO、WARN…等 
 %c(class):当前日志对象的名称，例如：模式字符串为：%-10c -%m%n  
     代码为：ILog log=LogManager.GetLogger(“Exam.Log”);
     log.Debug(“Hello”); 则输出为下面的形式：Exam.Log     - Hello 
 %L：输出语句所在的行号 
 %F：输出语句所在的文件名  
 %-数字：表示该项的最小长度，如果不够，则用空格填充
 例如，转换模式为%r [%t]%-5p %c - %m%n 的 PatternLayout 将生成类似于以下内容的输出：
 176 [main] INFO  org.foo.Bar - Located nearest gas station. 
 
 ============================================================================================
 
-->